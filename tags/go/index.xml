<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Nothing Owned</title><link>https://ydzhou.github.io/tags/go/</link><description>Recent content in Go on Nothing Owned</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 07 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ydzhou.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>A simple terminal text editor written in Go</title><link>https://ydzhou.github.io/tech/2021-01-07-ste/</link><pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate><guid>https://ydzhou.github.io/tech/2021-01-07-ste/</guid><description>&lt;p&gt;I build a simple text editor in the terminal &lt;a href="https://github.com/ydzhou/ste"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;
&lt;p&gt;Similar to MVC pattern, a text editor has three independent modules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;controller: to handle customer keyboard input and dispatch for further processing.&lt;/li&gt;
&lt;li&gt;model: to store what customer is working on and process necessary business logic.&lt;/li&gt;
&lt;li&gt;view: to render user interface of the editor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://ydzhou.github.io/ste0.svg" alt="Overview"&gt;&lt;/p&gt;
&lt;p&gt;You can think of the editor is in an infinite loop. First we clear the screen and render the viewable text document content in &lt;code&gt;stdout&lt;/code&gt;. The content view is decided by the position of the cursor and the size of the terminal screen. Then we listen on the key input at &lt;code&gt;stdin&lt;/code&gt; in order to modify the text document or execute corresponding commands.&lt;/p&gt;</description></item></channel></rss>